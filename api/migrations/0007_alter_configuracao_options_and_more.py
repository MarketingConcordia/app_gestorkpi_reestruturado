# Generated by Django 5.2.5 on 2025-09-09 14:09

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0006_alter_logdeacao_options_alter_setor_options_and_more'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='configuracao',
            options={'verbose_name': 'Configuração de Preenchimento', 'verbose_name_plural': 'Configurações de Preenchimento'},
        ),
        migrations.AlterModelOptions(
            name='configuracaoarmazenamento',
            options={'ordering': ('-criado_em',), 'verbose_name': 'Configuração de Armazenamento', 'verbose_name_plural': 'Configurações de Armazenamento'},
        ),
        migrations.AlterModelOptions(
            name='configuracaonotificacao',
            options={'ordering': ('-criado_em',), 'verbose_name': 'Configuração de Notificação', 'verbose_name_plural': 'Configurações de Notificação'},
        ),
        migrations.AlterModelOptions(
            name='indicador',
            options={'ordering': ('-criado_em',)},
        ),
        migrations.AlterModelOptions(
            name='logdeacao',
            options={'ordering': ('-data',), 'verbose_name': 'Log de Ação', 'verbose_name_plural': 'Logs de Ações'},
        ),
        migrations.AlterModelOptions(
            name='preenchimento',
            options={'ordering': ('-data_preenchimento',)},
        ),
        migrations.AlterField(
            model_name='configuracao',
            name='dia_limite_preenchimento',
            field=models.PositiveIntegerField(default=10, help_text='Até esse dia os gestores podem preencher indicadores.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)]),
        ),
        migrations.AlterField(
            model_name='configuracaoarmazenamento',
            name='dia_limite_preenchimento',
            field=models.PositiveSmallIntegerField(default=10, help_text='Apenas até esse dia do mês os gestores poderão preencher indicadores.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)], verbose_name='Dia limite para preenchimento'),
        ),
        migrations.AlterField(
            model_name='configuracaonotificacao',
            name='dia_do_mes',
            field=models.IntegerField(help_text='Dia do mês em que a notificação será disparada.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)]),
        ),
        migrations.AlterField(
            model_name='indicador',
            name='periodicidade',
            field=models.PositiveIntegerField(default=1, help_text='Periodicidade em meses (1 a 12)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)]),
        ),
        migrations.AlterField(
            model_name='meta',
            name='mes',
            field=models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)]),
        ),
        migrations.AlterField(
            model_name='preenchimento',
            name='indicador',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='preenchimentos', to='api.indicador'),
        ),
        migrations.AlterField(
            model_name='preenchimento',
            name='mes',
            field=models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)]),
        ),
        migrations.AlterUniqueTogether(
            name='permissaoindicador',
            unique_together={('usuario', 'indicador')},
        ),
        migrations.AddIndex(
            model_name='configuracaoarmazenamento',
            index=models.Index(fields=['ativo'], name='idx_config_arm_ativo'),
        ),
        migrations.AddIndex(
            model_name='configuracaoarmazenamento',
            index=models.Index(fields=['tipo'], name='idx_config_arm_tipo'),
        ),
        migrations.AddIndex(
            model_name='configuracaonotificacao',
            index=models.Index(fields=['ativo'], name='idx_config_notif_ativo'),
        ),
        migrations.AddIndex(
            model_name='configuracaonotificacao',
            index=models.Index(fields=['dia_do_mes'], name='idx_config_notif_dia'),
        ),
        migrations.AddIndex(
            model_name='indicador',
            index=models.Index(fields=['ativo'], name='idx_indicador_ativo'),
        ),
        migrations.AddIndex(
            model_name='indicador',
            index=models.Index(fields=['status'], name='idx_indicador_status'),
        ),
        migrations.AddIndex(
            model_name='indicador',
            index=models.Index(fields=['setor', 'ativo'], name='idx_indicador_setor_ativo'),
        ),
        migrations.AddIndex(
            model_name='logdeacao',
            index=models.Index(fields=['usuario', 'data'], name='idx_log_usuario_data'),
        ),
        migrations.AddIndex(
            model_name='logdeacao',
            index=models.Index(fields=['data'], name='idx_log_data'),
        ),
        migrations.AddIndex(
            model_name='meta',
            index=models.Index(fields=['indicador', 'ano', 'mes'], name='idx_meta_indicador_ano_mes'),
        ),
        migrations.AddIndex(
            model_name='metamensal',
            index=models.Index(fields=['mes'], name='idx_meta_mensal_mes'),
        ),
        migrations.AddIndex(
            model_name='permissaoindicador',
            index=models.Index(fields=['usuario', 'indicador'], name='idx_perm_user_ind'),
        ),
        migrations.AddIndex(
            model_name='preenchimento',
            index=models.Index(fields=['indicador', 'ano', 'mes'], name='idx_preench_indicador_ano_mes'),
        ),
        migrations.AddIndex(
            model_name='preenchimento',
            index=models.Index(fields=['data_preenchimento'], name='idx_preench_data'),
        ),
        migrations.AddConstraint(
            model_name='configuracaoarmazenamento',
            constraint=models.CheckConstraint(condition=models.Q(('dia_limite_preenchimento__gte', 1), ('dia_limite_preenchimento__lte', 31)), name='ck_config_arm_dia_limite_1_31'),
        ),
        migrations.AddConstraint(
            model_name='configuracaoarmazenamento',
            constraint=models.UniqueConstraint(condition=models.Q(('ativo', True)), fields=('ativo',), name='uq_config_arm_uma_ativa'),
        ),
        migrations.AddConstraint(
            model_name='configuracaonotificacao',
            constraint=models.CheckConstraint(condition=models.Q(('dia_do_mes__gte', 1), ('dia_do_mes__lte', 31)), name='ck_config_notif_dia_1_31'),
        ),
        migrations.AddConstraint(
            model_name='logdeacao',
            constraint=models.CheckConstraint(condition=models.Q(('acao__regex', '^\\s*$'), _negated=True), name='ck_log_de_acao_acoes_nao_vazias'),
        ),
    ]
